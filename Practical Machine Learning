install.packages("AppliedPredictiveModeling")

library(AppliedPredictiveModeling)
data(AlzheimerDisease)

library(caret)
adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]


adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
-------------------------------------------------------------
  
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
class(training$CompressiveStrength)
install.packages("Hmisc")
library(Hmisc)
x<-cut2(training$CompressiveStrength)
plot(x)
------------------------------------------------
  library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(training$Superplasticizer)
hist(training$Superplasticizer,log="y")
------------------------------------------------
  
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
preProcess() 
----------------------------------
  library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]


--------------------------------
  install.packages("ISLR")
  library(ISLR)
  data(Wage)
  summary(Wage)
  inTrain<-createDataPartition(Wage$wage,p = 0.7,list=FALSE)
  training<-Wage[inTrain,]
  testing<-Wage[-inTrain,]
  dim(training)
  dim(testing)
  featurePlot(x = training[,c("age","education","jobclass")],
              y = training$wage,
              plot = "paris")
  
  qplot(age,wage,data=training)
  
  
  
  
  ------------------
    Week3
  
  Question 3)
  
  library(AppliedPredictiveModeling)
  data(segmentationOriginal)
  library(caret)
  
  
  install.packages("pgmm")
  library(pgmm)
  data(olive)
  olive = olive[,-1]
  newdata = as.data.frame(t(colMeans(olive)))
  modFit<-train(olive$Area~.,data=olive,method="rf",prox=TRUE)
  
  predict(modFit,newdata = newdata)
  
  
  Question 4)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]

set.seed(13234)
fit <- glm(trainSA$famhist~trainSA$age+trainSA$alcohol+trainSA$obesity+trainSA$tobacco+trainSA$typea+trainSA$ldl,data=trainSA,family=binomial())

missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
  -----------------------------------
  
  
  
  
